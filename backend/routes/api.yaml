swagger: "2.0"
info:
  title: BrainBeatsWeb API 
  description: This is a BrainBeatsWeb API documentation form
  version: 1.0
  licenses:
    name: Apache 2.0
    url: "http://www.apache.org/liscences/LIS"
  servers:
    -url: https://api.brainbeats.dev
    description: Local server
schemes: [https]

# Path to API
paths:

  # ***** User Information ***** #

  # Returns all of list of users
    /api/users/getAllUsers:
      get:
        tags:
          - Users
        summary: Returns a list of all users.
        responses:
          200:    # status code
            description: Successful Response
            schema: 
              type: array
              items: 
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string

  # Create a new user
    /api/users/createUser:
      post:
        tags:
          - Users
        summary: Create a user
        operationId: createUser
        description: Create a new user in the database
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Create
          required: true
          description: User Creation
          schema:
            $ref: '#/definitions/createUser'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Find user by userID
    /api/users/getUserByID/:
      get:
        tags:
          - Users
        summary: Search a user by with their username
        operationId: getUserByID
        description: Search a user in the database
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Enter a user UUID
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Find user by username
    /api/users/getUserByUsername/:
      get:
        tags:
          - Users
        summary: Search a user by with their username
        operationId: getUserByUsername
        description: Search a user in the database
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Enter a user username
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

      # Find user by reset password token
    /api/users/getUserByResetPasswordToken/:
      get:
        tags:
          - Users
        summary: Search a user by with their reset password token
        operationId: getUserByResetPasswordToken
        description: Search a user in the database
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: resetPasswordToken
          schema:
            type: string
          description: Enter a reset password token
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Update user information
    /api/users/updateUser:
      put:
        tags:
          - Users
        summary: Update user
        operationId: updateUser
        description: Update user information
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Update
          required: true
          description: UpdateUser
          schema:
            $ref: '#/definitions/updateUser'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Delete a user by ID
    /api/users/deleteUser:
      delete:
        tags:
          - Users
        summary: Delete user by username
        operationId: deleteUser
        description: Delete a user from the database
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Delete User
          required: true
          description: Delete
          schema:
            $ref: '#/definitions/deleteUser'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found



  # ***** User Posts ***** #

  # Returns an array of all user posts
    /api/posts/getAllPosts:
      get:
        tags:
          - Posts
        summary: Returns a list of all users.
        responses:
          200:    # status code
            description: Successful Response
            schema: 
              type: array
              items: 
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string

  # Create user posts
    /api/posts/createPost:
      post:
        tags:
          - Posts
        summary: Create post at user profile
        operationId: createPost
        description: Create a post for a user by username
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Create post
          required: true
          description: User Post
          schema:
            $ref: '#/definitions/createPost'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Get user posts by username
    /api/posts/getUserPostsByUsername/:
      get:
        tags:
          - Posts
        summary: Search a users posts by username
        operationId: getUserPostsByUsername
        description: Get posts from user profile
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Enter a user username
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Get user posts by author ID
    /api/posts/getUsersPostsByID/:
      post:
        tags:
          - Posts
        summary: Search a users posts by user ID
        operationId: getUsersPostsByID
        description: Get posts from user profile
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: userID
          schema:
            type: string
          description: Enter a user UUID
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Update user post information
    /api/posts/updatePost:
      put:
        tags:
          - Posts
        summary: Update user post
        operationId: updatePost
        description: Update user post information
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Update
          required: true
          description: Updated information
          schema:
            $ref: '#/definitions/updatePost'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Delete a user post by ID
    /api/posts/deletePost:
      delete:
        tags:
          - Posts
        summary: Delete user by username
        operationId: deletePost
        description: Delete a user from the database
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: id
          required: true
          description: Delete
          schema:
            $ref: '#/definitions/deletePost'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found



  # ***** User Playlist ***** #

  # Returns all of playlists in db
    /api/playlists/getAllPlaylists:
      get:
        tags:
          - Playlists
        summary: Returns a list of playlists in db.
        responses:
          200:    # status code
            description: Successful Response
            schema: 
              type: array
              items: 
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string

  # Create user playlist
    /api/playlists/createPlaylist:
      post:
        tags:
          - Playlists
        summary: Create user playlist
        operationId: createPlaylist
        description: Create user a playlist
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Create
          required: true
          description: Create playlist information
          schema:
            $ref: '#/definitions/createPlaylist'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Add a post to the playlist 
    /api/playlists/addPostToPlaylist:
      post:
        tags:
          - Playlists
        summary: Add a post to the playlist
        operationId: addPostToPlaylist
        description: Add a post to the playlist
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: id
          required: true
          description: Add a post to the playlist
          schema:
            $ref: '#/definitions/addPostToPlaylist'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Get user posts by author ID
    /api/playlists/getPlaylistByID/:
      get:
        tags:
          - Playlists
        summary: Search a users posts by user ID
        operationId: getPlaylistByID
        description: Get posts from user profile
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Enter a user UUID
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Get user posts by author ID
    /api/playlists/getPlaylistsByPostID/:
      get:
        tags:
          - Playlists
        summary: Search a users posts by user ID
        operationId: getPlaylistsByPostID
        description: Get posts from user profile
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Enter a user playlist ID
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Get user posts by author ID
    /api/playlists/getPostsByPlaylistID/:
      get:
        tags:
          - Playlists
        summary: Search a users posts by user ID
        operationId: getPostsByPlaylistID
        description: Get playlist from user profile
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Enter a user playlist ID
          schema:
            type: string
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Update user playlist
    /api/playlists/updatePlaylist:
      put:
        tags:
          - Playlists
        summary: Update user playlist
        operationId: updatePlaylist
        description: Update user playlist
        consumes: 
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Update
          required: true
          description: Update playlist information
          schema:
            $ref: '#/definitions/updatePlaylist'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found

  # Delete a user playlist by playlist id
    /api/playlists/deletePlaylist:
      delete:
        tags:
          - Playlists
        summary: Delete user by username
        operationId: deletePlaylist
        description: Delete a user playlist from the database
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: id
          required: true
          description: Delete
          schema:
            $ref: '#/definitions/deletePlaylist'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found



  # *** User Verification *** #

  # Check login credentials
    /api/authentication/loginUser:
      post:
        tags:
        - Authentication
        summary: Checks if a user related to their password for login
        description: |
          Authenticates a user
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: loginUser
          required: true
          schema:
            $ref: '#/definitions/loginUser'
        responses:
          200:
            description: User logged in successfully
          401:
            description: bad input parameter

  # Send a verification email to a user
    /api/authentication/sendVerificationEmail:
      post:
        tags:
          - Authentication
        summary: Send a user a verification email
        operationId: sendVerificationEmail
        description: Sends a user a verification email to their account's email address
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Email
          required: true
          type: string
          schema:
            $ref: '#/definitions/sendVerificationEmail'
        responses:
          200:
            description: OK
          404:
            description: URL Not Found


# Definitions components
definitions:

  # ***** User ***** #

    createUser:
      required: 
      - firstName
      - lastName
      # - dob
      - email
      - username
      - password
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        # dob: 
        #   type: date 
        #   example: 1995-03-25
        email:
          type: string
          example: JohnDoe@gmail.com
        username:
          type: string
          example: JohnDoe96
        password:
          type: string
          example: JohnDoePassword

    updateUser:
      required: 
      - id
      - firstName
      - lastName
      - email
      - username
      properties:
        id:
          type: string
          example: 632961af-29ae-4c3a-8f3f-426763a4cf00
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        # dob: 
        #   type: date
        #   exmaple: 1997-07-13T00:00:00.000Z
        email:
          type: string
          example: JohnDoe@gmail.com
        username:
          type: string
          example: JohnDoe96

    deleteUser:
      required:
      - id
      properties:
        id:
          type: string
          exmaple: 632961af-29ae-4c3a-8f3f-426763a4cf00

  # ***** User Posts ***** #
    updatePost:
      required: 
      - id
      - firstName
      - lastName
      - email
      - username
      properties:
        id:
          type: int
          example: 5
        title:
          type: string
          example: New Post title
        bpm:
          type: int
          example: 50
        key:
          type: string
          example: C#
        visibility:
          type: boolean
          example: True
        # profilePicture:
        #   type: string
        #   example: https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwj_q7q_o_7jAhXDxVAKHWXxD-AQjRx6BAgBEAU&url=https%3A%2F%2Fwww.pexels.com%2Fphoto%2Fwoman-in-black-and-white-dressed-in-white-clothes-812093%2F&psig=AOvVaw0_X_X_X_X_X_X_X&ust=1560984100879087

    deletePost:
      required:
      - id
      properties:
        id:
          type: int
          exmaple: 5

    createPost:
      required: 
      - userID
      - title
      - bpm
      - key
      - visibility
      properties:
        userID:
          type: string
          example: 227d4d04-927b-421e-8d95-6eb91f05af05
        title:
          type: string
          example: Post title
        bpm:
          type: int
          example: 50
        key:
          type: string
          example: C#
        visibility:
          type: boolean
          example: True

    newPost:
      required: 
      - username
      - title
      - bpm
      - key
      properties:
        username:
          type: string
          example: JohnDoe96
        title:
          type: string
          example: New Post title
        bpm:
          type: int
          example: 50
        key:
          type: string
          example: C#

  # ***** User Playlists ***** #
    createPlaylist:
      required: 
      - userID
      - name
      properties:
        userID:
          type: string
          example: abb3973d-29ee-4221-aee1-639836c91be0
        name:
          type: string
          example: Playlist title

    updatePlaylist:
      required: 
      - id
      - name
      properties:
        id:
          type: int
          example: 1
        name:
          type: string
          example: Playlist title

    deletePlaylist:
      required: 
      - id
      properties:
        id:
          type: int
          example: 1

    addPostToPlaylist:
      required: 
      - userID
      - name
      properties:
        id:
          type: string
          example: 632961af-29ae-4c3a-8f3f-426763a4cf00
        name:
        type: string
        example: PLaylist name

  # ***** User Verification ***** #
    loginUser:
      required: 
      - email
      - password
      properties:
        email:
          type: string
          example: JohnDoe@gmail.com
        password:
          type: string
          example: JohnDoePassword
          
    sendVerificationEmail:
      required:
      - email
      - subject
      - text
      properties:
        email:
          type: string
          example: JohnDoe@gmail.com
        subject:
          type: string
          example: Verification Email Alert
        text:
          type: string
          example: Sending you a message in an e-mail!